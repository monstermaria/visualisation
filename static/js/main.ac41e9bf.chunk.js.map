{"version":3,"sources":["FileTreeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["FileTreeComponent","props","useState","open","setOpen","subComponents","listItemClass","displayClass","componentName","subTree","component","name","push","sort","a","b","aIsFolder","Object","keys","length","bIsFolder","key","localeCompare","className","onClick","event","stopPropagation","filePaths","App","fileTree","paths","root","forEach","path","pathParts","split","folder","i","part","createFileTree","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA2FeA,MAtFf,SAASA,EAAkBC,GAAO,MAGRC,oBAAS,GAHD,mBAGzBC,EAHyB,KAGnBC,EAHmB,KAe1BC,EAAgB,GAGlBC,EAAgB,GAGdC,EAAeJ,EAAO,OAAS,OAGrC,IAAK,IAAMK,KAAiBP,EAAMQ,QAAS,CAGzC,IAAMC,EAAY,cAAC,EAAD,CAAuCC,KAAMH,EAAeC,QAASR,EAAMQ,QAAQD,IAA3DA,GAG1CH,EAAcO,KAAKF,GAkCrB,OA9BAL,EAAcQ,MAAK,SAACC,EAAGC,GAGrB,IAAMC,EAAYC,OAAOC,KAAKJ,EAAEb,MAAMQ,SAASU,OAAS,EAClDC,EAAYH,OAAOC,KAAKH,EAAEd,MAAMQ,SAASU,OAAS,EAExD,OAAIH,IAAeI,GACT,EAGNA,IAAcJ,EACT,EAIFF,EAAEO,IAAIC,cAAcP,EAAEM,QAI3BlB,IACFG,EAAgB,QAKW,IAAzBD,EAAcc,SAChBb,EAAgB,QAKhB,qBAAIiB,UAAWjB,EAAekB,QA5DhC,SAA+BC,GAG7BA,EAAMC,kBAGNtB,GAASD,IAsDT,UAGGF,EAAMU,KAMNN,EAAcc,OAAS,EAAI,oBAAII,UAAWhB,EAAf,SAA8BF,IAAsB,OC3EhFsB,EAAY,CAChB,4BACA,+BACA,2BACA,2BACA,kDACA,yCACA,yBACA,yBAwDaC,MAbf,WAGE,IAAMC,EA3CR,SAAwBC,GAGtB,IAAMC,EAAO,GAkCb,OA/BAD,EAAME,SAAQ,SAACC,GAYb,IATA,IAAMC,EAAYD,EAAKE,MAAM,KAGzBC,EAASL,EAGTM,EAAI,EAGDA,EAAIH,EAAUf,QAAQ,CAG3B,IAAMmB,EAAOJ,EAAUG,GAGlBD,EAAOE,KAGVF,EAAOE,GAAQ,IAIjBF,EAASA,EAAOE,GAChBD,QAKGN,EAMUQ,CAAeZ,GAGhC,OAFAa,QAAQC,IAAIZ,GAGV,6BACE,cAAC,EAAD,CAAmBlB,KAAK,OAAOF,QAASoB,OCnD/Ba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ac41e9bf.chunk.js","sourcesContent":["import \"./FileTreeComponent.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nfunction FileTreeComponent(props) {\r\n\r\n  // use state for rendering folders open or closed\r\n  const [open, setOpen] = useState(false);\r\n\r\n  function toggleOpenCloseFolder(event) {\r\n\r\n    // this line is necessary for preventing the function to trigger on enclosing components\r\n    event.stopPropagation();\r\n\r\n    // toggle the state variable open, which in turn triggers rerendering with the new state\r\n    setOpen(!open);\r\n  }\r\n\r\n  // create an array for storing the subcomponent\r\n  const subComponents = [];\r\n\r\n  // variable for setting a css class on the component that changes the style of the list marker\r\n  let listItemClass = \"\";\r\n\r\n  // show or hide contents list of a folder depending on if it is open or not\r\n  const displayClass = open ? \"show\" : \"hide\";\r\n\r\n  // loop through the properties (subcomponents) of the subtree prop\r\n  for (const componentName in props.subTree) {\r\n\r\n    // create a FileTreeComponent\r\n    const component = <FileTreeComponent key={componentName} name={componentName} subTree={props.subTree[componentName]} />;\r\n\r\n    // add the list item to the list of subcomponents\r\n    subComponents.push(component);\r\n  }\r\n\r\n  // sort the contents (subcomponents) of the folder\r\n  subComponents.sort((a, b) => {\r\n\r\n    // sort folders before files\r\n    const aIsFolder = Object.keys(a.props.subTree).length > 0;\r\n    const bIsFolder = Object.keys(b.props.subTree).length > 0;\r\n\r\n    if (aIsFolder  && !bIsFolder) {\r\n      return -1;\r\n    }\r\n\r\n    if (bIsFolder && !aIsFolder) {\r\n      return 1;\r\n    }\r\n\r\n    // if the elements being compared is of the same type, sort on the name (key)\r\n    return a.key.localeCompare(b.key);\r\n  });\r\n\r\n  // decide class for this list item\r\n  if (open) {\r\n    listItemClass = \"open\";\r\n  }\r\n\r\n  // assuming all indata represents a file, and not an empty folder\r\n  // components without any subcomponents is categorized as a file\r\n  if (subComponents.length === 0) {\r\n    listItemClass = \"file\";\r\n  }\r\n\r\n  // render the component as a list item with the name of the component and its contents\r\n  return (\r\n    <li className={listItemClass} onClick={toggleOpenCloseFolder}>\r\n\r\n      { /* render the name of this file tree component */ }\r\n      {props.name}\r\n\r\n      { /* only render the subcomponents list if there are any subcomponents\r\n          render all subcomponents, but show them only if the enclosing folder is open\r\n          this is done to keep the open state of subfolders intact,\r\n          when a folder higher up in the hierarcy is closed */ }\r\n      {subComponents.length > 0 ? <ul className={displayClass}>{subComponents}</ul> : \"\"}\r\n\r\n    </li>\r\n  );\r\n}\r\n\r\n// using prop types to get a warning if the component don't get the right props\r\nFileTreeComponent.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  subTree: PropTypes.object.isRequired\r\n};\r\n\r\nexport default FileTreeComponent;\r\n","import './App.css';\nimport FileTreeComponent from \"./FileTreeComponent\";\n\n\nconst filePaths = [\n  \"marvel/black_widow/bw.png\",\n  \"marvel/drdoom/the-doctor.png\",\n  \"fact_marvel_beats_dc.txt\",\n  \"dc/aquaman/mmmmmomoa.png\",\n  \"marvel/black_widow/why-the-widow-is-awesome.txt\",\n  \"dc/aquaman/movie-review-collection.txt\",\n  \"marvel/marvel_logo.png\",\n  \"dc/character_list.txt\"\n];\n\nfunction createFileTree(paths) {\n\n  // root represents the root of a file tree\n  const root = {};\n\n  // parse all file paths in the input\n  paths.forEach((path) => {\n\n    // get the parts of the file path\n    const pathParts = path.split(\"/\");\n\n    // create a pointer to a position in the file tree and initiate it to \"root\"\n    let folder = root;\n\n    // index used when parsing the file path\n    let i = 0;\n\n    // handle all parts of the file path\n    while (i < pathParts.length) {\n\n      // part represents current folder or file\n      const part = pathParts[i];\n\n      // check if that folder or file exists at the current position in the file tree, add it if not\n      if (!folder[part]) {\n\n        // add a new folder in the current folder with the name stored in \"part\"\n        folder[part] = {};\n      }\n\n      // update position in file tree and index in file path\n      folder = folder[part];\n      i++;\n    }\n\n  });\n\n  return root;\n}\n\nfunction App() {\n\n  // create an object representing the file structure\n  const fileTree = createFileTree(filePaths);\n  console.log(fileTree);\n\n  return (\n    <ul>\n      <FileTreeComponent name=\"root\" subTree={fileTree} />\n    </ul>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}