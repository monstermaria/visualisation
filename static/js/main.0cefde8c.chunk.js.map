{"version":3,"sources":["FileTreeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["FileTreeComponent","props","subComponents","componentName","subTree","listItemClass","Object","keys","length","component","className","name","push","Fragment","filePaths","App","fileTree","paths","root","forEach","path","pathParts","split","folder","i","part","createFileTree","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAiDeA,MA5Cf,SAASA,EAAkBC,GAGzB,IAAMC,EAAgB,GAGtB,IAAK,IAAMC,KAAiBF,EAAMG,QAAS,CAIzC,IAGMC,EAH8D,IAArDC,OAAOC,KAAKN,EAAMG,QAAQD,IAAgBK,OAG1B,OAAS,SAGlCC,EAAY,oBAAwBC,UAAWL,EAAnC,SAChB,cAAC,EAAD,CAAmBM,KAAMR,EAAeC,QAASH,EAAMG,QAAQD,MADtCA,GAK3BD,EAAcU,KAAKH,GAIrB,OACE,eAAC,IAAMI,SAAP,WAGGZ,EAAMU,KAGNT,EAAcM,OAAS,EAAI,6BAAKN,IAAsB,OCjCvDY,EAAY,CAChB,4BACA,+BACA,2BACA,2BACA,kDACA,yCACA,yBACA,yBAwDaC,MAbf,WAGE,IAAMC,EA3CR,SAAwBC,GAGtB,IAAMC,EAAO,GAkCb,OA/BAD,EAAME,SAAQ,SAACC,GAYb,IATA,IAAMC,EAAYD,EAAKE,MAAM,KAGzBC,EAASL,EAGTM,EAAI,EAGDA,EAAIH,EAAUb,QAAQ,CAG3B,IAAMiB,EAAOJ,EAAUG,GAGlBD,EAAOE,KAGVF,EAAOE,GAAQ,IAIjBF,EAASA,EAAOE,GAChBD,QAKGN,EAMUQ,CAAeZ,GAGhC,OAFAa,QAAQC,IAAIZ,GAGV,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,CAAmBC,KAAK,OAAOP,QAASY,OCnD/Ba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0cefde8c.chunk.js","sourcesContent":["import \"./FileTreeComponent.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction FileTreeComponent(props) {\r\n\r\n  // create an array for storing the subcomponent\r\n  const subComponents = [];\r\n\r\n  // loop through the properties (subcomponents) of the sub tree prop\r\n  for (const componentName in props.subTree) {\r\n\r\n    // assuming all indata represents a file, and not an empty folder\r\n    // components without any subcomponents is categorised as a file\r\n    const isFile = Object.keys(props.subTree[componentName]).length === 0;\r\n\r\n    // decide class for this list item\r\n    const listItemClass = isFile ? \"file\" : \"folder\";\r\n\r\n    // create a list item that contains a FileTreeComponent component\r\n    const component = <li key={componentName} className={listItemClass}>\r\n      <FileTreeComponent name={componentName} subTree={props.subTree[componentName]} />\r\n    </li>;\r\n\r\n    // add the list item to the list of subcomponents\r\n    subComponents.push(component);\r\n  }\r\n\r\n  // render the name of the component and its contents\r\n  return (\r\n    <React.Fragment>\r\n\r\n      { /* render the name of this file tree component */ }\r\n      {props.name}\r\n\r\n      { /* only render the subcomponents list if there are any subcomponents */ }\r\n      {subComponents.length > 0 ? <ul>{subComponents}</ul> : \"\"}\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// using prop types to get a warning if the component don't get the right props\r\nFileTreeComponent.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  subTree: PropTypes.object.isRequired\r\n};\r\n\r\nexport default FileTreeComponent;\r\n","import './App.css';\nimport FileTreeComponent from \"./FileTreeComponent\";\n\n\nconst filePaths = [\n  \"marvel/black_widow/bw.png\",\n  \"marvel/drdoom/the-doctor.png\",\n  \"fact_marvel_beats_dc.txt\",\n  \"dc/aquaman/mmmmmomoa.png\",\n  \"marvel/black_widow/why-the-widow-is-awesome.txt\",\n  \"dc/aquaman/movie-review-collection.txt\",\n  \"marvel/marvel_logo.png\",\n  \"dc/character_list.txt\"\n];\n\nfunction createFileTree(paths) {\n\n  // root represents the root of a file tree\n  const root = {};\n\n  // parse all file paths in the input\n  paths.forEach((path) => {\n\n    // get the parts of the file path\n    const pathParts = path.split(\"/\");\n\n    // create a pointer to a position in the file tree and initiate it to \"root\"\n    let folder = root;\n\n    // index used when parsing the file path\n    let i = 0;\n\n    // handle all parts of the file path\n    while (i < pathParts.length) {\n\n      // part represents current folder or file\n      const part = pathParts[i];\n\n      // check if that folder or file exists at the current position in the file tree, add it if not\n      if (!folder[part]) {\n\n        // add a new folder in the current folder with the name stored in \"part\"\n        folder[part] = {};\n      }\n\n      // update position in file tree and index in file path\n      folder = folder[part];\n      i++;\n    }\n\n  });\n\n  return root;\n}\n\nfunction App() {\n\n  // create an object representing the file structure\n  const fileTree = createFileTree(filePaths);\n  console.log(fileTree);\n\n  return (\n    <div className=\"App\">\n      <FileTreeComponent name=\"root\" subTree={fileTree} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}